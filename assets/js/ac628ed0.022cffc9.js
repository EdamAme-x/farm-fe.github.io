"use strict";(self.webpackChunkfarm_docs=self.webpackChunkfarm_docs||[]).push([[9773],{294:(e,s,n)=>{n.d(s,{Z:()=>r});var a=n(9496),t=n(5924);const l={tabItem:"tabItem_rlDe"};function r(e){let{children:s,hidden:n,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,t.Z)(l.tabItem,r),hidden:n},s)}},4656:(e,s,n)=>{n.d(s,{Z:()=>N});var a=n(1163),t=n(9496),l=n(5924),r=n(9866),i=n(3442),o=n(2981),u=n(1267),p=n(1552);function m(e){return function(e){return t.Children.map(e,(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:s}=e;return!!s&&"object"==typeof s&&"value"in s}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:s,label:n,attributes:a,default:t}}=e;return{value:s,label:n,attributes:a,default:t}}))}function d(e){const{values:s,children:n}=e;return(0,t.useMemo)((()=>{const e=s??m(n);return function(e){const s=(0,u.l)(e,((e,s)=>e.value===s.value));if(s.length>0)throw new Error(`Docusaurus error: Duplicate values "${s.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[s,n])}function c(e){let{value:s,tabValues:n}=e;return n.some((e=>e.value===s))}function f(e){let{queryString:s=!1,groupId:n}=e;const a=(0,i.k6)(),l=function(e){let{queryString:s=!1,groupId:n}=e;if("string"==typeof s)return s;if(!1===s)return null;if(!0===s&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:s,groupId:n});return[(0,o._X)(l),(0,t.useCallback)((e=>{if(!l)return;const s=new URLSearchParams(a.location.search);s.set(l,e),a.replace({...a.location,search:s.toString()})}),[l,a])]}function g(e){const{defaultValue:s,queryString:n=!1,groupId:a}=e,l=d(e),[r,i]=(0,t.useState)((()=>function(e){let{defaultValue:s,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(s){if(!c({value:s,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${s}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return s}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:s,tabValues:l}))),[o,u]=f({queryString:n,groupId:a}),[m,g]=function(e){let{groupId:s}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(s),[a,l]=(0,p.Nk)(n);return[a,(0,t.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),b=(()=>{const e=o??m;return c({value:e,tabValues:l})?e:null})();(0,t.useLayoutEffect)((()=>{b&&i(b)}),[b]);return{selectedValue:r,selectValue:(0,t.useCallback)((e=>{if(!c({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),g(e)}),[u,g,l]),tabValues:l}}var b=n(3537);const h={tabList:"tabList_t2F_",tabItem:"tabItem_TXTv"};function k(e){let{className:s,block:n,selectedValue:i,selectValue:o,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:m}=(0,r.o5)(),d=e=>{const s=e.currentTarget,n=p.indexOf(s),a=u[n].value;a!==i&&(m(s),o(a))},c=e=>{let s=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;s=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;s=p[n]??p[p.length-1];break}}s?.focus()};return t.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},s)},u.map((e=>{let{value:s,label:n,attributes:r}=e;return t.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===s?0:-1,"aria-selected":i===s,key:s,ref:e=>p.push(e),onKeyDown:c,onClick:d},r,{className:(0,l.Z)("tabs__item",h.tabItem,r?.className,{"tabs__item--active":i===s})}),n??s)})))}function v(e){let{lazy:s,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(s){const e=l.find((e=>e.props.value===a));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return t.createElement("div",{className:"margin-top--md"},l.map(((e,s)=>(0,t.cloneElement)(e,{key:s,hidden:e.props.value!==a}))))}function y(e){const s=g(e);return t.createElement("div",{className:(0,l.Z)("tabs-container",h.tabList)},t.createElement(k,(0,a.Z)({},e,s)),t.createElement(v,(0,a.Z)({},e,s)))}function N(e){const s=(0,b.Z)();return t.createElement(y,(0,a.Z)({key:String(s)},e))}},2900:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>m,contentTitle:()=>u,default:()=>g,frontMatter:()=>o,metadata:()=>p,toc:()=>d});var a=n(1163),t=(n(9496),n(9613)),l=n(3067),r=n(4656),i=n(294);const o={},u="@farmfe/js-plugin-sass",p={unversionedId:"plugins/official-plugins/js-sass",id:"plugins/official-plugins/js-sass",title:"@farmfe/js-plugin-sass",description:"Support sass for Farm.",source:"@site/docs/plugins/official-plugins/js-sass.mdx",sourceDirName:"plugins/official-plugins",slug:"/plugins/official-plugins/js-sass",permalink:"/docs/plugins/official-plugins/js-sass",draft:!1,editUrl:"https://github.com/farm-fe/farm-fe.github.io/tree/main/docs/plugins/official-plugins/js-sass.mdx",tags:[],version:"current",frontMatter:{},sidebar:"pluginSidebar",previous:{title:"@farmfe/js-plugin-less",permalink:"/docs/plugins/official-plugins/js-less"},next:{title:"@farmfe/js-plugin-svgr",permalink:"/docs/plugins/official-plugins/js-svgr"}},m={},d=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Options",id:"options",level:2},{value:"sassOptions",id:"sassoptions",level:3},{value:"filters",id:"filters",level:3},{value:"implementation",id:"implementation",level:3},{value:"additionalData",id:"additionaldata",level:3},{value:"globals",id:"globals",level:3}],c={toc:d},f="wrapper";function g(e){let{components:s,...n}=e;return(0,t.kt)(f,(0,a.Z)({},c,n,{components:s,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"farmfejs-plugin-sass"},"@farmfe/js-plugin-sass"),(0,t.kt)("p",null,"Support ",(0,t.kt)("inlineCode",{parentName:"p"},"sass")," for Farm."),(0,t.kt)("h2",{id:"installation"},"Installation"),(0,t.kt)(r.Z,{mdxType:"Tabs"},(0,t.kt)(i.Z,{value:"npm",label:"npm",mdxType:"TabItem"},(0,t.kt)(l.Z,{mdxType:"CodeBlock"},"npm install @farmfe/js-plugin-sass sass")),(0,t.kt)(i.Z,{value:"yarn",label:"yarn",mdxType:"TabItem"},(0,t.kt)(l.Z,{mdxType:"CodeBlock"},"yarn add @farmfe/js-plugin-sass sass")),(0,t.kt)(i.Z,{value:"pnpm",label:"pnpm",mdxType:"TabItem"},(0,t.kt)(l.Z,{mdxType:"CodeBlock"},"pnpm add @farmfe/js-plugin-sass sass"))),(0,t.kt)("h2",{id:"usage"},"Usage"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{2,6}","{2,6}":!0},"import { UserConfig } from '@farmfe/core';\nimport farmJsPluginSass from '@farmfe/js-plugin-sass';\n\nconst config: UserConfig = {\n  plugins: [\n    farmJsPluginSass({ /* options */ })\n  ]\n}\n")),(0,t.kt)("h2",{id:"options"},"Options"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-ts"},"export type SassPluginOptions = {\n  sassOptions?: StringOptions<'async'>;\n  filters?: {\n    resolvedPaths?: string[];\n    moduleTypes?: string[];\n  };\n\n  /**\n   * - relative or absolute path\n   * - globals file will be added to the top of the sass file\n   * - when file changed, the file can't be hot-reloaded\n   *\n   * relative to project root or cwd\n   */\n  implementation?: string | undefined;\n  globals?: string[];\n  additionalData?:\n    | string\n    | ((content?: string, resolvePath?: string) => string | Promise<string>);\n};\n")),(0,t.kt)("h3",{id:"sassoptions"},"sassOptions"),(0,t.kt)("p",null,"Sass options. See ",(0,t.kt)("a",{parentName:"p",href:"https://sass-lang.com/documentation/js-api/interfaces/options/"},"sass options")," for more details."),(0,t.kt)("p",null,"Example:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-ts"},"import path from 'node:path';\nimport { UserConfig } from '@farmfe/core';\nimport farmJsPluginSass from '@farmfe/js-plugin-sass';\n\nconst config: UserConfig = {\n  plugins: [\n    farmJsPluginSass({\n      sassOptions: {\n        loadPaths: [path.resolve(process.cwd(), 'styles')]\n      }\n    })\n  ]\n}\n\nexport default config;\n")),(0,t.kt)("h3",{id:"filters"},"filters"),(0,t.kt)("p",null,"Which files should be processed by ",(0,t.kt)("inlineCode",{parentName:"p"},"sass"),". Default to ",(0,t.kt)("inlineCode",{parentName:"p"},"{ resolvedPaths: ['\\\\.(s[ac]ss)$'] }")," for load and ",(0,t.kt)("inlineCode",{parentName:"p"},"{ moduleTypes: ['sass'] }")," for transform."),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"resolvedPaths"),": Only files under these paths will be processed. Support regex."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"moduleTypes"),": Only files with these module types will be processed.")),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"resolvedPaths")," and ",(0,t.kt)("inlineCode",{parentName:"p"},"moduleTypes")," are unioned, which means files match any of them will be processed."),(0,t.kt)("p",null,"Example:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-ts"},"import { UserConfig } from '@farmfe/core';\nimport farmJsPluginSass from '@farmfe/js-plugin-sass';\n\nconst config: UserConfig = {\n  plugins: [\n    farmJsPluginSass({\n      filters: {\n        // all files end with .custom-css will be processed\n        resolvedPaths: ['\\\\.custom-sass$'],\n        moduleTypes: ['sass']\n      }\n    })\n  ]\n}\n\nexport default config;\n")),(0,t.kt)("h3",{id:"implementation"},"implementation"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"implementation")," package name of ",(0,t.kt)("inlineCode",{parentName:"p"},"sass"),". Default to ",(0,t.kt)("inlineCode",{parentName:"p"},"sass"),". If you want to use ",(0,t.kt)("inlineCode",{parentName:"p"},"sass-embedded"),", you can set it to ",(0,t.kt)("inlineCode",{parentName:"p"},"sass-embedded"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-ts"},"import { UserConfig } from '@farmfe/core';\nimport farmJsPluginSass from '@farmfe/js-plugin-sass';\n\nconst config: UserConfig = {\n  plugins: [\n    farmJsPluginSass({\n      implementation: 'sass-embedded'\n    })\n  ]\n}\n")),(0,t.kt)("admonition",{type:"note"},(0,t.kt)("p",{parentName:"admonition"},"You should install ",(0,t.kt)("inlineCode",{parentName:"p"},"sass-embedded")," manually.")),(0,t.kt)("h3",{id:"additionaldata"},"additionalData"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-ts"},"type AdditionalDataOption = string | ((content?: string, resolvePath?: string) => string | Promise<string>);\n")),(0,t.kt)("p",null,"Additional data to be added to every sass file. Example:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-ts"},"import { UserConfig } from '@farmfe/core';\nimport farmJsPluginSass from '@farmfe/js-plugin-sass';\n\nconst config: UserConfig = {\n  plugins: [\n    farmJsPluginSass({\n      // add variables.sass to every sass file\n      additionalData: `\n        @import \"./src/styles/variables.scss\";\n      `\n    })\n  ]\n}\n")),(0,t.kt)("p",null,"For sass file:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-sass",metastring:'title="index.scss"',title:'"index.scss"'},".foo {\n  color: @primary-color;\n}\n")),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"additionalData")," will be added to the top of the file:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-sass",metastring:'title="index.scss"',title:'"index.scss"'},'@import "./src/styles/variables.scss";\n\n.foo {\n  color: @primary-color;\n}\n')),(0,t.kt)("p",null,"Function form:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-ts"},"import { UserConfig } from '@farmfe/core';\nimport farmJsPluginSass from '@farmfe/js-plugin-sass';\n\nconst config: UserConfig = {\n  plugins: [\n    farmJsPluginSass({\n      // add variables.sass to every sass file\n      additionalData: (content, resolvePath) => {\n        if (resolvePath === '/path/to/index.sass') {\n          return `\n            @import \"./src/styles/variables.sass\";\n          `;\n        }\n      }\n    })\n  ]\n}\n")),(0,t.kt)("h3",{id:"globals"},"globals"),(0,t.kt)("p",null,"Global sass files. These files will be added to the top of every sass file. It's the same as ",(0,t.kt)("inlineCode",{parentName:"p"},"additionalData")," but more convenient."))}g.isMDXComponent=!0}}]);